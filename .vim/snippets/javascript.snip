# ---------------------------------------------------------------------------- #
# javascript snippets
# ---------------------------------------------------------------------------- #

snippet proto
abbr Prototype
  ${1:class_name}.prototype.${2:method_name} =
  function(${3:first_argument}) {
    ${4:// body...}
  };

snippet fun
abbr Function
  function ${1:function_name} (${2:argument}) {
    ${3:// body...}
  }

snippet fun2
abbr Anonymous Function
  function(${1}) {
    ${2}
  };

snippet if
abbr if
  if (${1:true}) {
    ${2}
  }

snippet ifelse
abbr if ... else
  if (${1:true}) {
    ${2}
  } else {
    ${3}
  }

snippet conditional
abbr conditional operator(ternary)
  ${1:/* condition */} ? ${2:a} : ${3:b}

snippet switch
abbr switch
  switch (${1:expression}) {
    case '${3:case}':
      ${4:// code}
      break;
    ${5}
    default:
      ${2:// code}
  }

snippet for
abbr for (...) {...}
  for (${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
    ${4:$1[$2]}
  }

snippet forr
abbr for (...) {...} (Improved Native For-Loop)
  for (${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
    ${4:$1[$2]}
  }

snippet while
abbr while (...) {...}
  while (${1:/* condition */}) {
    ${2:/* code */}
  }

snippet do
abbr do...while
  do {
    ${2:/* code */}
  } while (${1:/* condition */})

snippet :f
abbr Object Method
  ${1:method_name}: function(${2:attribute}) {
    ${4}
  }${3:,}

snippet timeout
abbr setTimeout function
  setTimeout(function() {
    ${2}
  }, ${1:10});

snippet get
abbr Get Elements
  getElementsBy${1:TagName}('${2}')${3}

snippet gett
abbr Get Element
  getElementBy${1:Id}('${2}')${3}

snippet scaffold
  (function($, window, document, undefined) {
  
  var ${1} = window.$1 || {};
  
  // Object here
  ${2}
  
  // export
  window.$1 = $1;
  
  }(jQuery, window, document));



# ---------------------------------------------------------------------------- #
# Array
# ---------------------------------------------------------------------------- #

snippet indexOf
abbr indexOf(array, item) (IE8+)
  function indexOf(array, item) {
    for (var i = 0; i < array.length; i++) {
      if (array[i] === item) {
        return i;
      }
    }
    return -1;
  }
  indexOf(array, item);

snippet isArray
abbr isArray(array) (IE8+)
  isArray = Array.isArray || function(array) {
    return Object.prototype.toString.call(array) === '[object Array]';
  }
  isArray(array);

snippet arraymap
abbr map(array, func(value, index)) (IE8+)
  function map(array, fn) {
    var results = [];
    for (var i = 0; i < array.length; i++) {
      results.push(fn(array[i], i));
    }
    return results;
  }
  map(array, function(value, index) {
  });

snippet flatten
abbr flatten(array) (IE8+)
  var flatten = function (array) {
    return array.reduce(function (p, c) {
      return Array.isArray(c) ? p.concat(flatten(c)) : p.concat(c);
    }, []);
  };

snippet unique
abbr unique(array) (IE8+)
  function unique(array) {
    return unique = array.filter(function(el, index, array) {
      return index === array.indexOf(el);
    });
  }


# ---------------------------------------------------------------------------- #
# Object
# ---------------------------------------------------------------------------- #

snippet extend
abbr extend({}, objA, objB) (IE8+)
  var extend = function(out) {
    out = out || {};
    for (var i = 1; i < arguments.length; i++) {
      if (!arguments[i]) {
        continue;
      }
      for (var key in arguments[i]) {
        if (arguments[i].hasOwnProperty(key)) {
          out[key] = arguments[i][key];
        }
      }
    }
    return out;
  };
  extend({}, objA, objB);

snippet deepextend
abbr deepextend({}, objA, objB) (IE8+)
  var deepExtend = function(out) {
    out = out || {};
    for (var i = 1; i < arguments.length; i++) {
      var obj = arguments[i];
      if (!obj) {
        continue;
      }
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          if (typeof obj[key] === 'object') {
            deepExtend(out[key], obj[key]);
          } else {
            out[key] = obj[key];
          }
        }
      }
    }
    return out;
  };
  deepExtend({}, objA, objB);

snippet objectmap
abbr objectmap
  Object.keys(${1:myObject}).map(function(value, index) {
    ${2}
  });



# ---------------------------------------------------------------------------- #
# Events
# ---------------------------------------------------------------------------- #

snippet trigger
abbr trigger (IE8+)
  if (document.createEvent) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent('change', true, false);
    el.dispatchEvent(event);
  } else {
    el.fireEvent('onchange');
  }

snippet addEventListender
abbr addEventListender(el, eventName, handler) (IE8+)
  function addEventListener(el, eventName, handler) {
    if (el.addEventListener) {
      el.addEventListener(eventName, handler);
    } else {
      el.attachEvent('on' + eventName, function(){
        handler.call(el);
      });
    }
  }

snippet removeEventListender
abbr removeEventListender(el, eventName, handler) (IE8+)
  function removeEventListener(el, eventName, handler) {
    if (el.removeEventListener)
      el.removeEventListener(eventName, handler);
    } else {
      el.detachEvent('on' + eventName, handler);
    }
  }


# ---------------------------------------------------------------------------- #
# misc
# ---------------------------------------------------------------------------- #

snippet ready
abbr ready(fn) (IE8+)
  function ready(fn) {
    if (document.readyState !== 'loading') {
      fn();
    } else if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', fn);
    } else {
      document.attachEvent('onreadystatechange', function() {
        if (document.readyState !== 'loading') {
          fn();
        }
      });
    }
  }

snippet ajaxget
abbr ajaxget (IE8+)
  var request = new XMLHttpRequest();
  request.open('GET', '/my/url', true);
  
  request.onreadystatechange = function() {
    if (this.readyState === 4) {
      if (this.status >= 200 && this.status < 400) {
        // Success!
        var resp = this.responseText;
      } else {
        // Error :(
      }
    }
  };
  request.send();
  request = null;

snippet ajaxpost
abbr ajaxpost (IE8+)
  var request = new XMLHttpRequest();
  request.open('POST', '/my/url', true);
  
  request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
  request.send(data);

snippet getjson
abbr getjson
  var request = new XMLHttpRequest();
  request.open('GET', '/my/url', true);
  
  request.onreadystatechange = function() {
    if (this.readyState === 4) {
      if (this.status >= 200 && this.status < 400) {
        // Success!
        var data = JSON.parse(this.responseText);
      } else {
        // Error :(
      }
    }
  };
  request.send();
  request = null;

snippet jsonparse
abbr (IE8+)
  JSON.parse(${1});

snippet type
abbr (IE8+)
  Object.prototype.toString.call(obj).replace(/^\[object (.+)\]$/, "$1").toLowerCase();

snippet useragent
abbr _ua = { Mobile: bool, Tablet: bool };
  var _ua = (function(u){
    return {
      Tablet:(u.indexOf("windows") != -1 && u.indexOf("touch") != -1)
        || u.indexOf("ipad") != -1
        || (u.indexOf("android") != -1 && u.indexOf("mobile") == -1)
        || (u.indexOf("firefox") != -1 && u.indexOf("tablet") != -1)
        || u.indexOf("kindle") != -1
        || u.indexOf("silk") != -1
        || u.indexOf("playbook") != -1,
      Mobile:(u.indexOf("windows") != -1 && u.indexOf("phone") != -1)
        || u.indexOf("iphone") != -1
        || u.indexOf("ipod") != -1
        || (u.indexOf("android") != -1 && u.indexOf("mobile") != -1)
        || (u.indexOf("firefox") != -1 && u.indexOf("mobile") != -1)
        || u.indexOf("blackberry") != -1
    }
  })(window.navigator.userAgent.toLowerCase());

