# ---------------------------------------------------------------------------- #
# $HOME/.vim/settings/bundles.toml
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  command! DeinInstall call dein#install()
  command! DeinUpdate call dein#update()
  command! DeinClean call map(dein#check_clean(), "delete(v:val, 'rf')")
'''



# ---------------------------------------------------------------------------- #
# syntax
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_check_on_open = 0

  let g:syntastic_check_on_wq = 0

  let g:syntastic_aggregate_errors = 1

  let g:syntastic_id_checkers = 1

  let g:syntastic_echo_current_error = 1

  let g:syntastic_enable_signs = 1

  let g:syntastic_error_symbol = ">>"
  let g:syntastic_style_error_symbol = ">>"

  let g:syntastic_warning_symbol = ">"
  let g:syntastic_style_warning_symbol = ">"

  let g:syntastic_enable_highlighting = 1

  let g:syntastic_auto_jump = 0

  let g:syntastic_auto_loc_list = 1

  let g:syntastic_loc_list_height = 8

  let g:syntastic_mode_map = {
        \ 'mode': 'active',
        \ 'active_filetypes': [],
        \ 'passive_filetypes': []
        \}

  let g:syntastic_stl_format = "[%E{e: %fe #%e}%B{, }%W{w: %fw #%w}]"
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']
hook_add = '''
  let g:context_filetype#filetypes = {
        \ 'typescript' : [
        \   {
        \     'start' : 'template:\s*`',
        \     'end' : '\s*`',
        \     'filetype' : 'html',
        \   },
        \   {
        \     'start' : 'styles:\s*[\s*`',
        \     'end' : '\s*`\s*]',
        \     'filetype' : 'css',
        \   }
        \ ],
        \}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'pearofducks/ansible-vim'



# ---------------------------------------------------------------------------- #
# expand
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let g:surround_{char2nr("\<CR>")} = "\n\t\r\n"
'''

[[plugins]]
repo = 'vim-scripts/matchit.zip'

[[plugins]]
repo = 'osyo-manga/vim-jplus'
hook_add = '''
  nmap <Space>J <Plug>(jplus-input)
  vmap <Space>J <Plug>(jplus-input)
'''



# ---------------------------------------------------------------------------- #
# interface
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " window resize
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''



# ---------------------------------------------------------------------------- #
# diff
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'rickhowe/diffchar.vim'
hook_add = '''
  let g:DiffUnit = "Word3"
  let g:DiffUpdate = 1
'''



# ---------------------------------------------------------------------------- #
# filer
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = '''
  let g:vaffle_auto_cd = 0
  let g:vaffle_show_hidden_files = 1
  nnoremap <silent> <Space>v :Vaffle<CR>
'''



# ---------------------------------------------------------------------------- #
# utility
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'



# ---------------------------------------------------------------------------- #
# git, gist
# ---------------------------------------------------------------------------- #

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  " set .vimrc.local
  let g:gista#github_user = $GIT_COMMITTER_NAME

  " TODO: improve
  " nnoremap <silent> [unite]g :<C-u>Unite gista<CR>
'''



# ---------------------------------------------------------------------------- #
# incremental search interface
# ---------------------------------------------------------------------------- #

# [[plugins]]
# repo = 'Shougo/unite.vim'
# depends = ['Shougo/denite.nvim']
# hook_add = '''
#   autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
#   autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
# '''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['nixprime/cpsm']
hook_add = '''
  noremap [denite] <Nop>
  nmap <Space> [denite]

  "call denite#custom#filter(
  "      \ 'matcher_ignore_globs',
  "      \ 'ignore_globs',
  "      \ [
  "      \   'node_modules/', 'bower_components/', 'tmp/', 'log/',
  "      \   '.*'
  "      \ ]
  "      \)

  "call denite#custom#option(
  "      \ 'default',
  "      \ 'auto_resize',
  "      \ 'true'
  "      \)

  "call denite#custom#map(
  "      \ 'insert',
  "      \ '<C-N>',
  "      \ '<denite:move_to_next_line>',
  "      \ 'noremap nowait'
  "      \)
  "call denite#custom#map(
  "      \ 'insert',
  "      \ '<C-P>',
  "      \ '<denite:move_to_previous_line>',
  "      \ 'noremap nowait'
  "      \)

  "call denite#custom#map(
  "      \ 'insert',
  "      \ '<Esc>',
  "      \ '<denite:enter_mode:normal>',
  "      \ 'noremap nowait'
  "      \ )
  "call denite#custom#map(
  "      \ 'normal',
  "      \ '<Esc>',
  "      \ '<denite:quit>',
  "      \ 'noremap nowait'
  "      \)

  "========== source: buffer,file_rec =========="

  call denite#custom#source(
        \ 'file_rec,file_rec/git',
        \ 'matchers',
        \ ['matcher_cpsm', 'matcher_ignore_globs']
        \)

  call denite#custom#var(
        \ 'directory_rec',
        \ 'command',
        \ ['Vaffle'])

  "call denite#custom#var(
  "      \ 'file_rec',
  "      \ 'command',
  "      \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
  "      \)

  nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
  nnoremap <silent> [denite]f :<C-u>Denite file_rec<CR>
  "nnoremap <silent> [denite]fr :<C-u>DeniteProjectDir -path='./' -resume -buffer-name=denite-file -default-action=tabswitch<CR>
  "nnoremap <silent> [denite]fn :<C-u>DeniteProjectDir -path='./' -resume  -buffer-name=denite-file -select=+1 -immediately -statusline=false<CR>
  "nnoremap <silent> [denite]fp :<C-u>DeniteProjectDir -path='./' -resume -buffer-name=denite-file -select=-1 -immediately -statusline=false<CR>

  "nnoremap <silent> [denite]fg :<C-u>DeniteProjectDir -path='./' -default-action=tabswitch file_rec/git<CR>
  ""nnoremap <silent> [denite]fk :<C-u>DeniteProjectDir -path='./' -default-action=tabswitch file_rec:..<CR>
  ""nnoremap <silent> [denite]ft :<C-u>DeniteProjectDir -path='./' -default-action=tabswitch file_rec:/<CR>
  "nnoremap <silent> [denite]fh :<C-u>DeniteProjectDir -path='./' -default-action=tabswitch file_rec:$HOME<CR>

  "========== source: directory_rec =========="

  "nnoremap <silent> [denite]dd :<C-u>DeniteProjectDir -path='./' -default-action=open directory_rec<CR>
  "nnoremap <silent> [denite]dt :<C-u>DeniteProjectDir -path='./' -default-action=cd directory_rec:/<CR>
  "nnoremap <silent> [denite]dh :<C-u>DeniteProjectDir -path='./' -default-action=action__path directory_rec:$HOME<CR>

  "========== source: line,grep =========="

  "call denite#custom#var(
  "      \ 'grep',
  "      \ 'command',
  "      \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden']
  "      \)
  "call denite#custom#var(
  "      \ 'grep',
  "      \ 'default_opts',
  "      \ []
  "      \)
  "call denite#custom#var(
  "      \ 'grep',
  "      \ 'recursive_opts',
  "      \ []
  "      \)
  call denite#custom#source(
        \ 'grep',
        \ 'matchers',
        \ ['matcher_cpsm', 'matcher_ignore_globs']
        \)

  nnoremap <silent> [denite]l :<C-u>Denite line<CR>
  nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
  "nnoremap <silent> [denite]gr :<C-u>DeniteProjectDir -path='./' -resume -buffer-name=denite-grep -default-action=tabswitch<CR>
  "nnoremap <silent> [denite]gn :<C-u>DeniteProjectDir -path='./' -resume -buffer-name=denite-grep -select=+1 -immediately -statusline=false<CR>
  "nnoremap <silent> [denite]gp :<C-u>DeniteProjectDir -path='./' -resume -buffer-name=denite-grep -select=-1 -immediately -statusline=false<CR>
'''



# # ---------------------------------------------------------------------------- #
# # denite/unite sources
# # ---------------------------------------------------------------------------- #
# 
# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# depends = ['Shougo/denite.nvim']
# hook_add = '''
#   " denite source 用キーマッピング
#   nnoremap <silent> [denite]y :<C-u>DeniteProjectDir -default-action=paste neoyank<CR>
# '''
# 
# 
# 
# # ---------------------------------------------------------------------------- #
# # completion
# # ---------------------------------------------------------------------------- #
# 
# [[plugins]]
# repo = 'Shougo/neco-syntax'
# depends = ['Shougo/neocomplete']
# 
# [[plugins]]
# repo = 'Shougo/neocomplete'
# hook_add = '''
#   " neocomplete が自動で起動
#   let g:neocomplete#enable_at_startup = 1
# 
#   " smartcase を使う
#   let g:neocomplete#enable_smart_case = 1
# 
#   " syntax は候補が多いので3文字以上で有効
#   let g:neocomplete#sources#syntax#min_keyword_length = 3
# 
#   " auto omni completion
#   let g:neocomplete#force_omni_input_patterns = {
#         \ 'css': '[^.]\:*\w*',
#         \ 'scss': '\h\w*\|[^. \t]\.\w*',
#         \ 'go': '[^. \t]\.\w*',
#         \ 'typescript': '[^. \t]\.\%(\h\w*\)\?',
#         \ 'javascript': '[^. \t]\.\%(\h\w*\)\?',
#         \}
# '''
# 
# [[plugins]]
# repo = 'honza/vim-snippets'
# depends = ['Shougo/neosnippet']
# 
# [[plugins]]
# repo = 'Shougo/neosnippet'
# depends = ['Shougo/denite.nvim']
# hook_add = '''
#   " neosnippet-snippets は使わない
#   let g:neosnippet#disable_runtime_snippets = {
#         \   '_' : 1,
#         \ }
# 
#   " neosnippet のキーマッピング
#   imap <C-k> <Plug>(neosnippet_expand_or_jump)
#   smap <C-k> <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k> <Plug>(neosnippet_expand_target)
# 
#   " tabキー拡張
#   imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#   \ "\<Plug>(neosnippet_expand_or_jump)"
#   \: pumvisible() ? "\<C-n>" : "\<TAB>"
#   smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#   \ "\<Plug>(neosnippet_expand_or_jump)"
#   \: "\<TAB>"
# 
#   " snipmate 用の snippet ファイルも使えるように
#   let g:neosnippet#enable_snipmate_compatibility = 1
# 
#   " snippet 用のディレクトリ
#   let g:neosnippet#snippets_directory = [
#         "\ '$HOME/.vim/bundles/repos/github.com/honza/vim-snippets/snippets',
#         \ '~/.vim/snippets'
#         \ ]
# 
#   " denite からの snippet 展開は未対応なため、 unite から呼ぶ
#   imap <C-s> <Plug>(neosnippet_start_unite_snippet)
#   nmap <C-s> i<Plug>(neosnippet_start_unite_snippet)
# 
#   " snippets ファイル自体の incremental search
#   inoremap <C-s><C-s> <Esc>:<C-u>Unite -start-insert -default-action=tabswitch neosnippet/user<CR>
#   nnoremap <C-s><C-s> :<C-u>Unite -start-insert -default-action=tabswitch neosnippet/user<CR>
#   nnoremap <silent> [denite]ss :<C-u>Unite -start-insert -default-action=tabswitch neosnippet/user<CR>
#   nnoremap <silent> [denite]se :<C-u>Unite -start-insert -default-action=tabswitch neosnippet/runtime<CR>
# '''
# 
# # [[plugins]]
# # repo = 'Shougo/neosnippet-snippets'
# # depends = ['Shougo/neosnippet']
